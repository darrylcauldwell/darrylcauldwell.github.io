<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rest on </title>
    <link>https://darrylcauldwell.github.io/tags/rest/</link>
    <description>Recent content in rest on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://darrylcauldwell.github.io/tags/rest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service accounts with VMware Aria Automation API</title>
      <link>https://darrylcauldwell.github.io/post/vra-api-svc-acc/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/vra-api-svc-acc/</guid>
      <description>
        
          &lt;p&gt;VMware &lt;a href=&#34;https://www.vmware.com/products/vrealize-automation.html&#34;&gt;VMware Aria Automation&lt;/a&gt; is a product suite comprising three products, &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Using-and-Managing-Cloud-Assembly/GUID-B9291A02-985E-4BD3-A11E-BDC839049072.html&#34;&gt;Cloud Assembly&lt;/a&gt;, &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Getting-Started-Service-Broker/GUID-8DDBB69B-6316-40FC-B584-C4F89643FA27.html&#34;&gt;Service Broker&lt;/a&gt; and &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Using-and-Managing-CodeStream/GUID-3625AE99-C60C-4517-803B-18C526ADCFF1.html&#34;&gt;Code Stream&lt;/a&gt;. These and other products are available &amp;lsquo;as a Service&amp;rsquo; via the &lt;a href=&#34;https://console.cloud.vmware.com&#34;&gt;VMware Cloud Services Portal&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;user-to-cloud-services-api-credentials&#34;&gt; User to Cloud Services API Credentials&lt;/h2&gt;
&lt;p&gt;Most of the API documentation is centred around a user making call using API tokens. API tokens are issued by users in an organization and are associated with the user’s account.&lt;/p&gt;
&lt;p&gt;The first step of a programatic flow is to pass the API token details to the Authorization Server. A Bearer Token is returned it is not intended to have any meaning to clients using it. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The Bearer Token is used in subsequent calls to the REST API.&lt;/p&gt;
&lt;h2 id=&#34;service-to-cloud-services-api-credentials&#34;&gt;Service to Cloud Services API Credentials&lt;/h2&gt;
&lt;p&gt;A common usecase is for servers and application services to make programmatic calls to REST APIs. If user aligned API tokens this can cause account lifecycle management headaches. VMware Cloud Services supports OAuth2 apps, the owner of the OAuth app is the organization in which it is created. These credentials can be managed by  user assigned the organization owner or developer roles.&lt;/p&gt;
&lt;p&gt;VMware Cloud Services supports the creation of different OAuth2 apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server to server app - Tokens are issued directly to your app&lt;/li&gt;
&lt;li&gt;Web app - Users of your app authorize access to protected resources&lt;/li&gt;
&lt;li&gt;Native/Mobile app - Authorization Code Grant (Public client)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some requirements will drive tightly coupled interactions and the building of client web or native applications. More typically cross product infrastructure managements tasks are loosely coupled.  OAuth2 Server to server app tokens are useful for these loosely coupled integrations. The programatic flow for these is very similar to that of the API token. The first step is to pass the OAuth2 API ID and APP Secret to the Authorization Server. A Bearer Token is returned which can be used in subsequent calls to the REST API.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-cloud-services-oauth2-server-to-server-app&#34;&gt;Creating A Cloud Services OAuth2 Server to server app&lt;/h2&gt;
&lt;p&gt;To create a OAuth2 Server to server app you must connect to the &lt;a href=&#34;https://console.cloud.vmware.com&#34;&gt;VMware Cloud Services Portal&lt;/a&gt; with user account with sufficient priviliges.&lt;/p&gt;
&lt;p&gt;Navigate to Organization and then OAuth Apps and follow the Create App wizard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-1.png&#34; alt=&#34;Creating A Cloud Services OAuth2 Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add any Organization Role memberships which offer the right priviliges to the application calling the API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-2.png&#34; alt=&#34;Adding a Organization Role to a Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add any Service Role memberships which offer the right priviliges to the application calling the API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-3.png&#34; alt=&#34;Adding a Service Role to a Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;The creation wizard will output an Application ID and a Application Secret, store these securely.&lt;/p&gt;
&lt;h2 id=&#34;calling-vrealize-automation-api-using-a-oauth2-server-to-server-app&#34;&gt;Calling vRealize Automation API Using A OAuth2 Server to server app&lt;/h2&gt;
&lt;p&gt;In this test of functionality I am using a simple REST client.  The Application ID and a Application Secret need to be securely stored.  To similuate secret management solution I store these as environment variables along with the URL of the VMware Cloud Services API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-env-var.png&#34; alt=&#34;REST client environment variables&#34;&gt;&lt;/p&gt;
&lt;p&gt;With the secrets stored the next step is to form a POST to the Authorization Server.  This needs to have Authorization Username value set as the Application ID and the Password value set as the Application Secret.  As in my test these are environment variables I simply reference these.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-rest-post.png&#34; alt=&#34;VMware Cloud Services API Authorization Server POST&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Authorization Server also requires a POST body to body in &amp;lsquo;x-www-form-unicode&amp;rsquo; where a key value pair is passed.  The key needs to set to &amp;lsquo;grant_type&amp;rsquo; and the value set to &amp;lsquo;client_credentials&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-rest-post-body.png&#34; alt=&#34;VMware Cloud Services API Authorization Server POST Body&#34;&gt;&lt;/p&gt;
&lt;p&gt;When POST is made if Application ID and a Application Secret are accepted by the API a Bearer token is returned in the response.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-bearer.png&#34; alt=&#34;VMware Cloud Services API Bearer Token&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Orchestrating configuration of vROps via REST API with Postman</title>
      <link>https://darrylcauldwell.github.io/post/vrops_rest/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/vrops_rest/</guid>
      <description>
        
          &lt;p&gt;vRealize Operations Manager (vROps) exposes some of its configuration via RESTful API. With this we can look to programatically control its configuration. My workflow is to use a REST client to explore API and validate payload formatting before moving to script the steps. My REST client of choice is &lt;a href=&#34;https://www.postman.com/&#34;&gt;Postman&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Performing any REST configuration in vRealize Operations Manager requires at least two steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Authenticate&lt;/li&gt;
&lt;li&gt;Perform action, like configure a new vCenter adapter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To faciliate running a sequence of actions I start by creating a POSTMAN collection. Requests stored within the collection can be played in sequence. Using the example of configuring a new vCenter adapter we might create a collection called &amp;lsquo;vROps - New vCenter Adapter&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;In case we have multiple environments and want to export our collection and reuse we  want to store environmental specifics as variables. To faciliate this we can create a POSTMAN envrionment. For example we might create a environment called &amp;lsquo;Homelab&amp;rsquo; which has variable vrops-fqdn and both initial and current value of vrops01.example.local&lt;/p&gt;
&lt;p&gt;vRealize Operations Manager REST API documentation describes how we can &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Operations-Manager/8.1/com.vmware.vcom.api.doc/GUID-C3F0A911-A587-40F7-9998-13D4880A0C2B.html&#34;&gt;aquire an authentication token&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create new reques in Postman with name &amp;lsquo;Aquire token&amp;rsquo;, set the request method to POST and set URL to use environment variable like:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% raw %}
https://{{vrops-fqdn}}/suite-api/api/auth/token/acquire
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The documentation shows that two headers are required to be supplied so we must configure our request to pass these:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Content-Type: application/json
Accept: application/json
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The documentation also describes that we need to POST the vROps logon credentials as the body. Within Postman change body type to raw and paste below substrituing credentials appropriate to your environment.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;username&amp;#34;: &amp;#34;vRealize-username&amp;#34;,
  &amp;#34;password&amp;#34;: &amp;#34;vRealize-password&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Successul processing of credential by the REST method returns a JSON body containing the token parameter. We want to capture this to use in the next step in our process. We can do this in Postman by running a script after the request is made which extracts the token value and sets this an environment variable. Change to the Test tab and add the following script.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;var jsonData = JSON.parse(responseBody);
postman.setEnvironmentVariable(&amp;#34;bearerToken&amp;#34;, jsonData.token);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now look at the next step in our example is to add a vCenter adapter which is documented &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Operations-Manager/8.1/com.vmware.vcom.api.doc/GUID-18D17D09-628F-4974-AFE4-E94446E3462D.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create new reques in Postman with name &amp;lsquo;Aquire token&amp;rsquo;, set the request method to POST and set URL to use environment variable like:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% raw %}
https://{{vrops-fqdn}}/suite-api/api/adapters
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We require to apply three headers to this request, the ones to describe payload is in JSON format and an authentication header which passes the token value environment variable from previous step.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{% raw %}
Content-Type: application/json
Accept: application/json
Authentication: vRealizeOpsToken {{bearerToken}}
{% endraw %}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The documentation supplies an example body to post with some optional parameters. Similar to aquire step we place this in request body tab and ensure raw format is selected (ensuring you set envioronmentally values).&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;name&amp;#34; : &amp;#34;New VC Adapter Instance&amp;#34;,
  &amp;#34;collectorId&amp;#34; : &amp;#34;1&amp;#34;,
  &amp;#34;adapterKindKey&amp;#34; : &amp;#34;VMWARE&amp;#34;,
  &amp;#34;resourceIdentifiers&amp;#34; : [ 
    {
      &amp;#34;name&amp;#34; : &amp;#34;VCURL&amp;#34;,
      &amp;#34;value&amp;#34; : &amp;#34;https://vcenter.example.local&amp;#34;
    } 
  ],
  &amp;#34;credential&amp;#34; : {
    &amp;#34;id&amp;#34; : null,
    &amp;#34;name&amp;#34; : &amp;#34;VC-Credential-1&amp;#34;,
    &amp;#34;adapterKindKey&amp;#34; : &amp;#34;VMWARE&amp;#34;,
    &amp;#34;credentialKindKey&amp;#34; : &amp;#34;PRINCIPALCREDENTIAL&amp;#34;,
    &amp;#34;fields&amp;#34; : [ 
      {
        &amp;#34;name&amp;#34; : &amp;#34;USER&amp;#34;,
        &amp;#34;value&amp;#34; : &amp;#34;administrator@vsphere.local&amp;#34;
      }, 
      {
        &amp;#34;name&amp;#34; : &amp;#34;PASSWORD&amp;#34;,
        &amp;#34;value&amp;#34; : &amp;#34;VC-dummy-passwd&amp;#34;
      } 
    ],
  },
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is not essential but it is useful for troubleshooting of our request to output the token environment variable value to log prior to attempting to make the request. To do this we can use the &amp;lsquo;Pre-request script&amp;rsquo; tab and add the follwoing script.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;console.log(pm.environment.get(&amp;#34;bearerToken&amp;#34;));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can now run the collection which will open &amp;lsquo;Postman runner&amp;rsquo; which will make the two requests. The summary detail is output to &amp;lsquo;Postman running&amp;rsquo; and you can get more detailed output in &amp;lsquo;Postman console&amp;rsquo; view.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Calling the NSX REST API with vRO and Navigating The XML Response</title>
      <link>https://darrylcauldwell.github.io/post/vro-nsx-rest/</link>
      <pubDate>Wed, 20 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/vro-nsx-rest/</guid>
      <description>
        
          &lt;p&gt;While the NSX for vSphere plugin for vRealize Orchestrator is useful, occasionally there are limitations. For example when creating an NSX Edge Services Gateway we use this method.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NSXEdgeTrinityBasicController.createEdgeV4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That method returns void,  so next you need to make a second method call using filter by name to get the object and obtain object ID which is typically the input to other methods.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;NSXEdgeTrinityBasicController.getAllEdgeSummariesV4
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When creating NSX Distributed Logical Router it is the same method to create. However the second method to get the object fails as it cannot handle the additional property LogicalRouterScope which DLRs have, so throws an error.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;java.lang.NoSuchMethodException:com.vmware.vshield.edge.dto.trinity.LogicalRouterScope.&amp;lt;init&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After trying various other NSX plugin methods all have same issue so I changed approach. NSX offers all its capabilities via &lt;a href=&#34;https://docs.vmware.com/en/VMware-NSX-for-vSphere/6.4/nsx_64_api.pdf&#34;&gt;REST API&lt;/a&gt;. vRealize Orchestrator comes with a HTTP-REST plugin, so in theory we can add NSX Managers as HTTP-REST endpoint and call everything direct.&lt;/p&gt;
&lt;p&gt;If you have multiple REST HTTP hosts added you would want to bring back a list of these.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;restHosts = RESTHostManager.getHosts();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This returns an array of UUIDs of each REST host, we can use these UUIDs to get the REST host objects. We could normally loop to find the specific &lt;a href=&#34;http://www.vroapi.com/Class/REST/2.2.2/RESTHost&#34;&gt;RESThost&lt;/a&gt; object we are looking for, but for ease here we would use the first item from array.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;host = RESTHostManager.getHost(restHosts[0]);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we have the target &lt;a href=&#34;http://www.vroapi.com/Class/REST/2.2.2/RESTHost&#34;&gt;RESThost&lt;/a&gt; object look at forming the request using the &lt;a href=&#34;http://www.vroapi.com/Method/REST/2.2.2/RESTHost/createRequest&#34;&gt;createRequest&lt;/a&gt; method.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;request = host.createRequest(&amp;#39;GET&amp;#39;,&amp;#39;/api/4.0/edges&amp;#39;,&amp;#39;&amp;#39;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have our request formed we can look to make the call using the &lt;a href=&#34;http://www.vroapi.com/Method/REST/2.2.2/RESTHost/executeRequestWithCredentials&#34;&gt;executeRequestWithCredentials&lt;/a&gt; method. Here I store username and password as Secure String variables.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;responseStr = request.executeWithCredentials(username,password);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This returns a &lt;a href=&#34;http://www.vroapi.com/Class/REST/2.2.2/RESTResponse&#34;&gt;RESTResponse&lt;/a&gt; object, this has attribute contentAsString to navigate this XML we first convert this string to a &lt;a href=&#34;https://www.w3schools.com/XML/dom_document.asp&#34;&gt;XML DOM Document Object&lt;/a&gt;. vRealize Orchestrator comes with a &lt;a href=&#34;http://www.vroapi.com/Plugin/XML/7.0.1&#34;&gt;XML plugin&lt;/a&gt; we can use the &lt;a href=&#34;http://www.vroapi.com/Method/XML/7.0.1/XMLManager/fromString&#34;&gt;XMLManager.fromString&lt;/a&gt; method to perform this converstion.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;responseXml = XMLManager.fromString(responseStr.contentAsString);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If we look inside of the XML which is returned from /api/4.0/edges we can see each the hierachy that each NSX Edge is a XML Node called edgeSummary and within that Node are child nodes for all of its attributes.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;lt;pagedEdgeList&amp;gt;
    &amp;lt;edgePage&amp;gt;
        &amp;lt;edgeSummary&amp;gt;
            &amp;lt;objectId&amp;gt;
            &amp;lt;objectTypeName&amp;gt;
            &amp;lt;vsmUuid&amp;gt;
            &amp;lt;nodeId&amp;gt;
            &amp;lt;Revision&amp;gt;
            &amp;lt;type&amp;gt;
            &amp;lt;name&amp;gt;
            ...
        &amp;lt;edgeSummary&amp;gt;
            &amp;lt;objectId&amp;gt;
            &amp;lt;objectTypeName&amp;gt;
            &amp;lt;vsmUuid&amp;gt;
            &amp;lt;nodeId&amp;gt;
            &amp;lt;Revision&amp;gt;
            &amp;lt;type&amp;gt;
            &amp;lt;name&amp;gt;
            ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So we need to bring back all the edgeSummary Nodes and create a &lt;a href=&#34;http://www.vroapi.com/Class/XML/7.0.1/XMLNodeList&#34;&gt;XMLNodeList&lt;/a&gt; object containing all of out Edges.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;edgeNodeList = responseXml.getElementsByTagName(&amp;#34;edgeSummary&amp;#34;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once we have this we can loop around the children of this and find the correct Edge entry and then get the objectId. We know the child order is always the same so we can choose data from positon in list and output the text content of Node.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;for (var i = 0 ; i &amp;lt; edgeNodeList.length ; i++) {
    var node = edgeNodeList.item(i) ;
    edgeChildNodeList = node.getChildNodes();
    if (edgeChildNodeList.item(6).textContent == edgeName) {
        var objectId = edgeChildNodeList.item(0).textContent ;
        System.log(&amp;#34;Edge named &amp;#34; + edgeName + &amp;#34; has objectId &amp;#34; + objectId) ;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this technique we should be able to get around any vRealize Orchestrator NSX Plugin limitation. This would also be useful for calling other RESTful APIs in absence of a specific vRealize Orchestrator plugin.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
