<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cloud assembly on </title>
    <link>https://darrylcauldwell.github.io/tags/cloud-assembly/</link>
    <description>Recent content in cloud assembly on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 22 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://darrylcauldwell.github.io/tags/cloud-assembly/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service accounts with VMware Aria Automation API</title>
      <link>https://darrylcauldwell.github.io/post/vra-api-svc-acc/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/vra-api-svc-acc/</guid>
      <description>
        
          &lt;p&gt;VMware &lt;a href=&#34;https://www.vmware.com/products/vrealize-automation.html&#34;&gt;VMware Aria Automation&lt;/a&gt; is a product suite comprising three products, &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Using-and-Managing-Cloud-Assembly/GUID-B9291A02-985E-4BD3-A11E-BDC839049072.html&#34;&gt;Cloud Assembly&lt;/a&gt;, &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Getting-Started-Service-Broker/GUID-8DDBB69B-6316-40FC-B584-C4F89643FA27.html&#34;&gt;Service Broker&lt;/a&gt; and &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Using-and-Managing-CodeStream/GUID-3625AE99-C60C-4517-803B-18C526ADCFF1.html&#34;&gt;Code Stream&lt;/a&gt;. These and other products are available &amp;lsquo;as a Service&amp;rsquo; via the &lt;a href=&#34;https://console.cloud.vmware.com&#34;&gt;VMware Cloud Services Portal&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;user-to-cloud-services-api-credentials&#34;&gt; User to Cloud Services API Credentials&lt;/h2&gt;
&lt;p&gt;Most of the API documentation is centred around a user making call using API tokens. API tokens are issued by users in an organization and are associated with the user’s account.&lt;/p&gt;
&lt;p&gt;The first step of a programatic flow is to pass the API token details to the Authorization Server. A Bearer Token is returned it is not intended to have any meaning to clients using it. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The Bearer Token is used in subsequent calls to the REST API.&lt;/p&gt;
&lt;h2 id=&#34;service-to-cloud-services-api-credentials&#34;&gt;Service to Cloud Services API Credentials&lt;/h2&gt;
&lt;p&gt;A common usecase is for servers and application services to make programmatic calls to REST APIs. If user aligned API tokens this can cause account lifecycle management headaches. VMware Cloud Services supports OAuth2 apps, the owner of the OAuth app is the organization in which it is created. These credentials can be managed by  user assigned the organization owner or developer roles.&lt;/p&gt;
&lt;p&gt;VMware Cloud Services supports the creation of different OAuth2 apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server to server app - Tokens are issued directly to your app&lt;/li&gt;
&lt;li&gt;Web app - Users of your app authorize access to protected resources&lt;/li&gt;
&lt;li&gt;Native/Mobile app - Authorization Code Grant (Public client)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some requirements will drive tightly coupled interactions and the building of client web or native applications. More typically cross product infrastructure managements tasks are loosely coupled.  OAuth2 Server to server app tokens are useful for these loosely coupled integrations. The programatic flow for these is very similar to that of the API token. The first step is to pass the OAuth2 API ID and APP Secret to the Authorization Server. A Bearer Token is returned which can be used in subsequent calls to the REST API.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-cloud-services-oauth2-server-to-server-app&#34;&gt;Creating A Cloud Services OAuth2 Server to server app&lt;/h2&gt;
&lt;p&gt;To create a OAuth2 Server to server app you must connect to the &lt;a href=&#34;https://console.cloud.vmware.com&#34;&gt;VMware Cloud Services Portal&lt;/a&gt; with user account with sufficient priviliges.&lt;/p&gt;
&lt;p&gt;Navigate to Organization and then OAuth Apps and follow the Create App wizard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-1.png&#34; alt=&#34;Creating A Cloud Services OAuth2 Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add any Organization Role memberships which offer the right priviliges to the application calling the API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-2.png&#34; alt=&#34;Adding a Organization Role to a Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add any Service Role memberships which offer the right priviliges to the application calling the API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-3.png&#34; alt=&#34;Adding a Service Role to a Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;The creation wizard will output an Application ID and a Application Secret, store these securely.&lt;/p&gt;
&lt;h2 id=&#34;calling-vrealize-automation-api-using-a-oauth2-server-to-server-app&#34;&gt;Calling vRealize Automation API Using A OAuth2 Server to server app&lt;/h2&gt;
&lt;p&gt;In this test of functionality I am using a simple REST client.  The Application ID and a Application Secret need to be securely stored.  To similuate secret management solution I store these as environment variables along with the URL of the VMware Cloud Services API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-env-var.png&#34; alt=&#34;REST client environment variables&#34;&gt;&lt;/p&gt;
&lt;p&gt;With the secrets stored the next step is to form a POST to the Authorization Server.  This needs to have Authorization Username value set as the Application ID and the Password value set as the Application Secret.  As in my test these are environment variables I simply reference these.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-rest-post.png&#34; alt=&#34;VMware Cloud Services API Authorization Server POST&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Authorization Server also requires a POST body to body in &amp;lsquo;x-www-form-unicode&amp;rsquo; where a key value pair is passed.  The key needs to set to &amp;lsquo;grant_type&amp;rsquo; and the value set to &amp;lsquo;client_credentials&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-rest-post-body.png&#34; alt=&#34;VMware Cloud Services API Authorization Server POST Body&#34;&gt;&lt;/p&gt;
&lt;p&gt;When POST is made if Application ID and a Application Secret are accepted by the API a Bearer token is returned in the response.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-bearer.png&#34; alt=&#34;VMware Cloud Services API Bearer Token&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Cloud Assembly VM Guest Management With Ansible</title>
      <link>https://darrylcauldwell.github.io/post/ansible-cloud-assembly/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/ansible-cloud-assembly/</guid>
      <description>
        
          &lt;p&gt;VMware &lt;a href=&#34;https://cloud.vmware.com/cloud-automation-services&#34;&gt;Cloud Automation Services&lt;/a&gt; is a product suite comprising three products, &lt;a href=&#34;https://cloud.vmware.com/cloud-assembly&#34;&gt;Cloud Assembly&lt;/a&gt;, &lt;a href=&#34;https://cloud.vmware.com/service-broker&#34;&gt;Service Broker&lt;/a&gt; and &lt;a href=&#34;https://cloud.vmware.com/code-stream&#34;&gt;Code Stream&lt;/a&gt;. Cloud Assembly provides a blueprinting engine and manages connectivity to multiple cloud endpoints. Service Broker provides a unified catalog for publishing blueprints with role-based policies. Code Stream provides a release pipeline with analytics.&lt;/p&gt;
&lt;p&gt;The Cloud Assembly blueprinting engine can be used to consistently deliver VMs and applications.  To deliver VM guest configuration Cloud Assembly natively uses &lt;a href=&#34;https://cloudinit.readthedocs.io/en/latest/&#34;&gt;cloud-init&lt;/a&gt;. This native VM guest configuration capability can be extended with desired state management tools &lt;a href=&#34;https://puppet.com/&#34;&gt;Puppet&lt;/a&gt; and &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;. A major difference between the Puppet and Ansible is that Puppet requires an in-guest agent where Ansible operates agentless.&lt;/p&gt;
&lt;h2 id=&#34;ansible&#34;&gt;Ansible&lt;/h2&gt;
&lt;p&gt;In this blog post I am going to focus on Cloud Assembly integration with Ansible.  The Ansible engine is &lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;fully open source&lt;/a&gt;, but OSS RedHat also offers a &lt;a href=&#34;https://www.ansible.com/products/engine&#34;&gt;license model and support package&lt;/a&gt; for Ansible engine. In addition to the Ansible engine RedHat provides support for &lt;a href=&#34;https://www.ansible.com/products/tower&#34;&gt;Ansible Tower&lt;/a&gt; which offers many enterprise grade features. A useful comparison can be found in the blog &lt;a href=&#34;https://www.ansible.com/blog/red-hat-ansible-automation-engine-vs-tower&#34;&gt;Red Hat Ansible Automation: Engine, Tower or Both&lt;/a&gt;. Cloud Assembly supports integration directly with Ansible engine and does not depend on Ansible Tower.&lt;/p&gt;
&lt;p&gt;The Ansible control node connects to managed nodes and pushing out small programs, called &amp;ldquo;Ansible modules&amp;rdquo; to them. These programs are written to be resource models of the desired state of the system. Ansible then executes these modules (over SSH by default), and removes them when finished.&lt;/p&gt;
&lt;h2 id=&#34;ansible-headless-deployment-model&#34;&gt;Ansible Headless Deployment Model&lt;/h2&gt;
&lt;p&gt;Ansible does not require a single controlling machine. Any Linux machine can run Ansible. A headless deployment model is where each machine runs as both the Ansible control node role and the Ansible controlled node. The absence of a central management server requirement can greatly increase availability, simplify disaster-recovery planning and enhance security (no single point of control).&lt;/p&gt;
&lt;p&gt;When we use this deployment model each server has Ansible installed and has inventory file with a single entry named localhost. We create a Cloud Assembly blueprint which includes cloud-init configuration to pull an Ansible playbook from a repository and execute it locally. Here the Ansible playbook is specific to the server role on which it will be ran.&lt;/p&gt;
&lt;p&gt;An example of how to deploy an application using this deployment architecture using Cloud Assembly is described &lt;a href=&#34;https://github.com/darrylcauldwell/titoAnsibleHeadless&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;central-ansible-control-node&#34;&gt;Central Ansible Control Node&lt;/h2&gt;
&lt;p&gt;While running Ansible without a central control node can be useful for some deployment scenarios, others are better suited to having a central Ansible controller node controlling multiple clients.&lt;/p&gt;
&lt;p&gt;Typical factors which would drive a deployment architecture with a central control node would be the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows guests as Ansible control node can only runs on Linux&lt;/li&gt;
&lt;li&gt;Large deployments that require centralized control for day two operations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we use this deployment model we deploy a central Ansible control node and on this we create SSH authorization private public key pair. We then configure this to be integrated with Cloud Assembly.&lt;/p&gt;
&lt;p&gt;We create a Cloud Assembly blueprint which includes on each VM resource cloud-init configuration to create a local account named ansible which has a SSH public key of key pair on the Ansible control node. The Cloud Assembly blueprint then has Ansible resource added with details of the Ansible control node, the private key to use to connect and which playbook to execute. Within the blueprint the Ansible resouece has a relationship formed with the appropriate VM resources. When the blueprint is deployed the VM resources get added dynamically to the Ansible server inventory file and the playbook executed. In this model the Ansible playbook can be application rather than server role specific.&lt;/p&gt;
&lt;p&gt;An example of how to deploy an application with this deployment architecture using Cloud Assembly is described &lt;a href=&#34;https://github.com/darrylcauldwell/titoAnsible&#34;&gt;here&lt;/a&gt;.  This also includes a simplified example of how Ansible server can be used for day two operations for servers of a specific type.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
