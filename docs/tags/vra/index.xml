<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vra on </title>
    <link>https://darrylcauldwell.github.io/tags/vra/</link>
    <description>Recent content in vra on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 22 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://darrylcauldwell.github.io/tags/vra/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Service accounts with VMware Aria Automation API</title>
      <link>https://darrylcauldwell.github.io/post/vra-api-svc-acc/</link>
      <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/vra-api-svc-acc/</guid>
      <description>
        
          &lt;p&gt;VMware &lt;a href=&#34;https://www.vmware.com/products/vrealize-automation.html&#34;&gt;VMware Aria Automation&lt;/a&gt; is a product suite comprising three products, &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Using-and-Managing-Cloud-Assembly/GUID-B9291A02-985E-4BD3-A11E-BDC839049072.html&#34;&gt;Cloud Assembly&lt;/a&gt;, &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Getting-Started-Service-Broker/GUID-8DDBB69B-6316-40FC-B584-C4F89643FA27.html&#34;&gt;Service Broker&lt;/a&gt; and &lt;a href=&#34;https://docs.vmware.com/en/vRealize-Automation/SaaS/Using-and-Managing-CodeStream/GUID-3625AE99-C60C-4517-803B-18C526ADCFF1.html&#34;&gt;Code Stream&lt;/a&gt;. These and other products are available &amp;lsquo;as a Service&amp;rsquo; via the &lt;a href=&#34;https://console.cloud.vmware.com&#34;&gt;VMware Cloud Services Portal&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;user-to-cloud-services-api-credentials&#34;&gt; User to Cloud Services API Credentials&lt;/h2&gt;
&lt;p&gt;Most of the API documentation is centred around a user making call using API tokens. API tokens are issued by users in an organization and are associated with the user’s account.&lt;/p&gt;
&lt;p&gt;The first step of a programatic flow is to pass the API token details to the Authorization Server. A Bearer Token is returned it is not intended to have any meaning to clients using it. The name “Bearer authentication” can be understood as “give access to the bearer of this token.” The Bearer Token is used in subsequent calls to the REST API.&lt;/p&gt;
&lt;h2 id=&#34;service-to-cloud-services-api-credentials&#34;&gt;Service to Cloud Services API Credentials&lt;/h2&gt;
&lt;p&gt;A common usecase is for servers and application services to make programmatic calls to REST APIs. If user aligned API tokens this can cause account lifecycle management headaches. VMware Cloud Services supports OAuth2 apps, the owner of the OAuth app is the organization in which it is created. These credentials can be managed by  user assigned the organization owner or developer roles.&lt;/p&gt;
&lt;p&gt;VMware Cloud Services supports the creation of different OAuth2 apps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server to server app - Tokens are issued directly to your app&lt;/li&gt;
&lt;li&gt;Web app - Users of your app authorize access to protected resources&lt;/li&gt;
&lt;li&gt;Native/Mobile app - Authorization Code Grant (Public client)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Some requirements will drive tightly coupled interactions and the building of client web or native applications. More typically cross product infrastructure managements tasks are loosely coupled.  OAuth2 Server to server app tokens are useful for these loosely coupled integrations. The programatic flow for these is very similar to that of the API token. The first step is to pass the OAuth2 API ID and APP Secret to the Authorization Server. A Bearer Token is returned which can be used in subsequent calls to the REST API.&lt;/p&gt;
&lt;h2 id=&#34;creating-a-cloud-services-oauth2-server-to-server-app&#34;&gt;Creating A Cloud Services OAuth2 Server to server app&lt;/h2&gt;
&lt;p&gt;To create a OAuth2 Server to server app you must connect to the &lt;a href=&#34;https://console.cloud.vmware.com&#34;&gt;VMware Cloud Services Portal&lt;/a&gt; with user account with sufficient priviliges.&lt;/p&gt;
&lt;p&gt;Navigate to Organization and then OAuth Apps and follow the Create App wizard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-1.png&#34; alt=&#34;Creating A Cloud Services OAuth2 Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add any Organization Role memberships which offer the right priviliges to the application calling the API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-2.png&#34; alt=&#34;Adding a Organization Role to a Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;Add any Service Role memberships which offer the right priviliges to the application calling the API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-create-app-3.png&#34; alt=&#34;Adding a Service Role to a Server to server app&#34;&gt;&lt;/p&gt;
&lt;p&gt;The creation wizard will output an Application ID and a Application Secret, store these securely.&lt;/p&gt;
&lt;h2 id=&#34;calling-vrealize-automation-api-using-a-oauth2-server-to-server-app&#34;&gt;Calling vRealize Automation API Using A OAuth2 Server to server app&lt;/h2&gt;
&lt;p&gt;In this test of functionality I am using a simple REST client.  The Application ID and a Application Secret need to be securely stored.  To similuate secret management solution I store these as environment variables along with the URL of the VMware Cloud Services API.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-env-var.png&#34; alt=&#34;REST client environment variables&#34;&gt;&lt;/p&gt;
&lt;p&gt;With the secrets stored the next step is to form a POST to the Authorization Server.  This needs to have Authorization Username value set as the Application ID and the Password value set as the Application Secret.  As in my test these are environment variables I simply reference these.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-rest-post.png&#34; alt=&#34;VMware Cloud Services API Authorization Server POST&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Authorization Server also requires a POST body to body in &amp;lsquo;x-www-form-unicode&amp;rsquo; where a key value pair is passed.  The key needs to set to &amp;lsquo;grant_type&amp;rsquo; and the value set to &amp;lsquo;client_credentials&amp;rsquo;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-rest-post-body.png&#34; alt=&#34;VMware Cloud Services API Authorization Server POST Body&#34;&gt;&lt;/p&gt;
&lt;p&gt;When POST is made if Application ID and a Application Secret are accepted by the API a Bearer token is returned in the response.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://darrylcauldwell.github.io/images/vra-api-svc-acc-bearer.png&#34; alt=&#34;VMware Cloud Services API Bearer Token&#34;&gt;&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Cloudbased-init For vSphere</title>
      <link>https://darrylcauldwell.github.io/post/cloudbased-init/</link>
      <pubDate>Thu, 26 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/cloudbased-init/</guid>
      <description>
        
          &lt;p&gt;vRealize Automation Cloud and 8.x allows you to deploy and configure cloud agnostic virtual machines. To achieve agnostic in-guest OS customization capability across for on-premises vSphere, AWS, GCP and Azure endpoints &lt;a href=&#34;https://cloud-init.io/&#34;&gt;cloud-init&lt;/a&gt; is used for Linux guests and &lt;a href=&#34;https://cloudbase.it/cloudbase-init/&#34;&gt;cloudbase-init&lt;/a&gt; is used for Windows guests.&lt;/p&gt;
&lt;h2 id=&#34;inital-attempt-all-defaults&#34;&gt;Inital Attempt All Defaults&lt;/h2&gt;
&lt;p&gt;In vSphere I created a Windows 2019 VM with defaults except for mapping ISO as CD/ROM. I then ran through installer to install Standard edition with Desktop experience, installed VMware Tools, disabled firewall and enabled Remote Desktop. I installed Cloudbased- init 0.9.12.dev76 and optional Carbon PowerShell module to default location. For configuration options I left the default Admin user be created into Administrators group, in addition I selected option to ‘Run Cloudbased-Init service as LocalSystem’. I chose options to &amp;lsquo;Run Sysprep to create a generalized image&amp;rsquo; and &amp;lsquo;Shutdown when Sysprep terminates&amp;rsquo;. When complete I change virtual machine to be a virtual machine template.&lt;/p&gt;
&lt;p&gt;I connect to vRealize Automation Cloud &amp;gt; Infrastructure &amp;gt; Cloud Accounts &amp;gt; {my account} and run &amp;lsquo;Sync Images&amp;rsquo;.  Once image sync is completed vRealize Automation Cloud &amp;gt; Infrastructure &amp;gt; Image Mappings and create &amp;lsquo;New Image Mapping&amp;rsquo;. Create a Blueprint with single Cloud Agnostic Machine linked to the image mapping.&lt;/p&gt;
&lt;p&gt;When I provision a vRA Cloud blueprint to deploy a VM&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;formatVersion: 1
inputs: {}
resources:
Cloud_Machine_1:
    type: Cloud.Machine
    properties:
    image: dc-win2019
    flavor: small
    cloudConfig: |
        #cloud-config
        hostname: i-got-a-new-name
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The VM powers on and cloud-data gets passed by vRealize Automation Cloud as an OVF which is mounted as CDROM with CDROM contents ovf-env.xml in its root.&lt;/p&gt;
&lt;p&gt;Cloud-init runs on startup but appears to fail to do what it is asked, Cloudbase-init.log contains error.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2019-09-26 16:00:15.041 4360 ERROR cloudbaseinit.metadata.services.base [-] HTTPConnectionPool(host=&#39;169.254.169.254&#39;, port=80): Max retries exceeded with url: /openstack/latest/meta_data.json
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;adding-ovf-metadata-service&#34;&gt;Adding OVF Metadata Service&lt;/h2&gt;
&lt;p&gt;Looking at the error suggested to me that Cloudbase-Init was not finding the OVF and file. I read through some of the Cloudbase-Init documentation and found that metadata service configuration was specified in,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Program Files\Cloudbase Solutions\Cloudbase-Init\conf\cloudbase-init-unattend.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Checking the default configuration file does not include the &lt;a href=&#34;https://cloudbase-init.readthedocs.io/en/latest/services.html&#34;&gt;OvfService metadata service&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;metadata_services=cloudbaseinit.metadata.services.configdrive.ConfigDriveService,cloudbaseinit.metadata.services.httpservice.HttpService,cloudbaseinit.metadata.services.ec2service.EC2Service,cloudbaseinit.metadata.services.maasservice.MaaSHttpService
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If I follow similar steps to before to creeate templat but during install of Cloudbase-init but DO NOT chose wizard options &amp;lsquo;Sysprep and Shutdown&amp;rsquo;.  Instead I update the metadata_services entry in the cloudbase-init-unattend.conf file include OvfService like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;metadata_services=cloudbaseinit.metadata.services.ovfservice.OvfService
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Other Cloudbase-Init &lt;a href=&#34;https://cloudbase-init.readthedocs.io/en/latest/plugins.html#plugins&#34;&gt;plugins&lt;/a&gt; which require reading metadata, such that which sets the hostname, pickup their configuration from this config file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\Program Files\Cloudbase Solutions\Cloudbase-Init\conf\cloudbase-init.conf
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The default installation of cloudbase-init.conf does not have a metadata_services entry at all. To allow the plugins be capable of reading metadata from OVF source add the following line to the file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;metadata_services=cloudbaseinit.metadata.services.ovfservice.OvfService
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When both files have been updated execute sysprep passing the same parameters as the Cloudbase-Init installer wizard would:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cd “C:\Program Files\Cloudbase Solutions\Cloudbase-Init\conf\”
C:\Windows\System32\Sysprep\Sysprep.exe /quiet /generalize /oobe /shutdown /unattend:unattend.xml
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Performing a deployment of thee vRealize Automation Cloud blueprint example from earlier now deploys a VM with its hostname updated.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Understanding VMware Guest OS Customization</title>
      <link>https://darrylcauldwell.github.io/post/guest-customization/</link>
      <pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://darrylcauldwell.github.io/post/guest-customization/</guid>
      <description>
        
          &lt;p&gt;I recently began looking more closely at cloud-init for customizing VMware guest VMs. This caused me some heachaches! I took various notes while troubleshooting and researching around this.&lt;/p&gt;
&lt;h2 id=&#34;why-guest-os-customization-is-needed&#34;&gt;Why Guest OS Customization Is Needed&lt;/h2&gt;
&lt;p&gt;When you clone a virtual machine or deploy a virtual machine from a template it clones the virtual hard disk and all guest operating system settings. In many deployment scenarios if virtual machines with identical settings are deployed conflicts can occur, such as duplicate computer names. Typically for this deployment scenario during deployment guest operating system customization is required to be performed to give them uniqueness.&lt;/p&gt;
&lt;h2 id=&#34;vm-guest-os-customization-approach&#34;&gt;VM Guest OS Customization Approach&lt;/h2&gt;
&lt;p&gt;VMware has long provided the facility to perform guest operating system customization through a combination of vCenter Server and VMware Tools. This gives the option to choose to launch the Guest Customization wizard during the cloning or deployment process,  or can create standard customization specifications and apply these during the cloning or deployment process.&lt;/p&gt;
&lt;p&gt;When the virtual machine template is Linux the VMware guest operating system customization is performed using a combination of cloud-init and a collection of perl scripts packaged with open-vm-tools.&lt;/p&gt;
&lt;h2 id=&#34;logfiles-and-log-configuration&#34;&gt;Logfiles and Log Configuration&lt;/h2&gt;
&lt;p&gt;Guest OS can be complex and things can go wrong during guest OS customization. When they do its useful to understand where to look for clues as to cause.&lt;/p&gt;
&lt;p&gt;If there were any problems with the extraction and deployment of the customization package onto the guest operating system these are written to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/var/log/vmware-imc/toolsDeployPkg.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;VMware guest operating system customization steps performed using the perl scripts output to default location of /var/log/messages. There are many other things in this log file so can use grep to view only the customization steps:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;grep &amp;quot;customize-guest&amp;quot; /var/log/messages 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are many options for configuring cloud-init logging. These can be configured these within your template virtual machine. The configuration settings are stored in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/cloud/cloud.cfg.d/05_logging.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Within this configuration file we can identify that by default cloud-init directs the main handler output to a file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/var/log/cloud-init.log
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We can also see that by default the stdout and stderr of the specific we tell it to perform is written to:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/var/log/cloud-init-output.log
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;customization-guest-customatization-configuration&#34;&gt;Customization Guest Customatization Configuration&lt;/h2&gt;
&lt;p&gt;There are many options which cloud-init can be configured with. These can be configured these within your template virtual machine. The configuration settings are stored in:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/etc/cloud/cloud.cfg
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One of the options which can be configured is whether VMware tools perl scripts are ran. How to enable or disable this is documented in this article:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://kb.vmware.com/s/article/59557
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It is useful to note here that there is currently a known issue when cloud-init calls the open-vm-tools perl scripts for &amp;lsquo;Ubuntu 18.04&amp;rsquo;. The boot sequence and bring up order can cause the perl scripts to fail. A high level cause and workaround are described here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://kb.vmware.com/s/article/56409 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A more detailed description of the bug including some very interesting detail about how cloud-init and open-vm-tools perl scripts are called is described here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://bugs.launchpad.net/ubuntu/+source/open-vm-tools/+bug/1793715
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;cloud-init-user-data&#34;&gt;Cloud-Init User-Data&lt;/h2&gt;
&lt;p&gt;One of the more useful enhancements of using cloud-init is the ability to instruct the guest operating system to run things such as custom scripts during boot.&lt;/p&gt;
&lt;p&gt;User-Data content supports the following types of content &amp;lsquo;gzip compressed&amp;rsquo; or &amp;lsquo;mime multi-part archive&amp;rsquo;. With a mime multi-part file, the user can specify more than one type of data within the content.  For full details on the User-Data content format see here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://cloudinit.readthedocs.io/en/latest/topics/format.html
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The two most common data types I use at the moment are Cloud Config Data or simple shell scripts. To differentiate sections when using a &amp;lsquo;mime multi-part archive&amp;rsquo; begin each section with data type for example  &lt;code&gt;#!&lt;/code&gt; for shell script or &lt;code&gt;#cloud-config&lt;/code&gt; for cloud config data.&lt;/p&gt;
&lt;p&gt;Cloud-init can be fussy about syntax of the file contents once created you can validate the syntaxt using a command like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cloud-init devel schema --config-file /tmp/user-data
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;vcenter-deploy-ova-import&#34;&gt;vCenter Deploy OVA Import&lt;/h2&gt;
&lt;p&gt;Some operating systems packages which include cloud-init expose options to confiure during deployment.  For example Ubuntu which can be found here:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://cloud-images.ubuntu.com/releases/18.04/release/ubuntu-18.04-server-cloudimg-amd64.ova
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The Ubunutu image includes property &amp;lsquo;Encoded user-data&amp;rsquo; this has property description &lt;em&gt;&amp;ldquo;In order to fit into a xml attribute, this value is base64 encoded . It will be decoded, and then processed normally as user-data&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;I like to keep a file copy of the un-encoded and encoded user-data. To do this I use text editior to create a file with the required cloud-init user-data contents.  I then use &lt;a href=&#34;https://linux.die.net/man/1/base64&#34;&gt;base64&lt;/a&gt; to output contents into a file appended with .b64.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;base64 --input /tmp/user-data --output /tmp/user-data.b64
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If encoded user-data is passed during deployment of OVA file in this way this will run when the VM boots.&lt;/p&gt;
&lt;h2 id=&#34;cloud-assembly&#34;&gt;Cloud Assembly&lt;/h2&gt;
&lt;p&gt;Other VMware products such as Cloud Assembly can utilize open-vm-tools and cloud-init to perform guest customization.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://docs.vmware.com/en/VMware-Cloud-Assembly/services/Using-and-Managing/GUID-70EA052D-FABF-4CE5-875D-9B52FED08AA3.html
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;https://blogs.vmware.com/management/2018/11/customizing-cloud-assembly-deployments-with-cloud-init.html
&lt;/code&gt;&lt;/pre&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
